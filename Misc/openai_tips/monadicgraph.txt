Here is an example of a monad in Haskell that represents graphs:


data Graph a = Graph [a] [(a, a)]
    deriving (Show, Eq)

instance Monad Graph where
    return x = Graph [x] []

    (Graph xs ys) >>= f = Graph zs ws
        where zs = nub $ concatMap (\(Graph xs' ys') -> xs') (map f xs)
              ws = concatMap (\(Graph xs' ys') -> ys') (map f xs)


This Graph monad represents a graph as a list of nodes xs and a list of edges ys, which are pairs of nodes. The return function simply creates a graph with a single node and no edges. The >>= operator, also known as bind, allows us to "chain" multiple graphs together by combining their nodes and edges. The resulting graph will have all the nodes and edges from the input graphs.
For example, we could use this monad to define a simple graph like this:


let g = return 1 >>= \x -> return (x + 1) >>= \y -> return (x, y)


This would create a graph with two nodes (1 and 2) and one edge connecting them. The resulting graph would be Graph [1, 2] [(1, 2)].
As a more advanced example, we could use this monad to define a function that creates a complete graph with a given number of nodes:


complete :: Int -> Graph Int
complete n = do
    xs <- sequence [return x | x <- [1..n]]
    return (xs, [(x, y) | x <- xs, y <- xs, x /= y])


This function first creates a list of nodes using a list comprehension and the sequence function, which is a standard function in Haskell for combining a list of monadic values into a single monadic value. Then it creates a list of edges by using another list comprehension to iterate over all pairs of nodes and adding an edge between them if they are not the same node. The resulting graph will have n nodes and n * (n - 1) / 2 edges, which is the maximum number of edges possible in a complete graph with n nodes. For example, complete 3 would return the graph Graph [1, 2, 3] [(1, 2), (1, 3), (2, 3)].